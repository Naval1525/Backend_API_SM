// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  username         String    @unique
  email            String    @unique
  password         String
  createdAt        DateTime  @default(now())
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  followers        Follows[] @relation("Followers")
  following        Follows[] @relation("Following")
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
}

model Post {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  CreatedAt DateTime @default(now())

  @@unique([userId, postId]) // Ensure a user can only like a post once
}

model Follows {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Prevents following same person twice
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  createdAt  DateTime @default(now())
}
